{"input_text": "TSDBs are databases that are optimized for  time series  data. Software with complex logic or business rules and high  transaction  volume for time series data may not be practical with traditional  relational database management systems .  Flat file database s are not a viable option either, if the data and transaction volume reaches a maximum threshold determined by the capacity of individual servers (processing power and storage capacity). Queries for historical data, replete with time ranges and roll ups and arbitrary time zone conversions are difficult in a relational database.  Compositions of those rules are even more difficult.  This is a problem compounded by the free nature of relational systems themselves.  Many relational systems are often not modelled correctly with respect to time series data.  TSDBs on the other hand impose a model and this allows them to provide more features for doing so.\nOrganizational Intelligence and  operational intelligence  are usually seen as subsets of  business analytics , since both are types of know-how that have the goal of improving business performance across the enterprise.  Operational Intelligence is often linked to or compared with  real-time business intelligence  (BI) since both deliver visibility and insight into business operations.  Operational Intelligence differs from BI in being primarily activity-centric, whereas BI is primarily data-centric and relies on a database (or  Hadoop  cluster) as well as after-the-fact and report-based approaches to identifying patterns in data.  By definition, Operational Intelligence works in real-time and transforms unstructured data streams\u2014from log file, sensor, network and service data\u2014into real-time, actionable intelligence.\nA NoSQL (originally referring to \"non SQL\", \"non relational\" or \"not only SQL\") database provides a mechanism for  storage  and  retrieval  of data which is modeled in means other than the tabular relations used in  relational database s. Such databases have existed since the late 1960s, but did not obtain the \"NoSQL\" moniker until a surge of popularity in the early twenty-first century, triggered by the needs of  Web 2.0  companies such as  Facebook ,  Google , and  Amazon.com . NoSQL databases are increasingly used in  big data  and  real-time web  applications.   NoSQL systems are also sometimes called \"Not only SQL\" to emphasize that they may support  SQL -like query languages.\nThe original benchmark was developed by workers in the research division of  Yahoo!  who released it in 2010 with the stated goal of \"facilitating performance comparisons of the new generationof cloud data serving systems\", particularly for transaction-processing workloads which differed from ones measured by benchmarks designed for more traditional database management systems.\nWhile  real-time business intelligence  is a reality for select companies, it remains elusive to many as it is dependent on these premises: the percentage of the business that is online, and the degree of level of sophistication of the software. Technology companies like Google, Dell, and Apple are best positioned to capitalize on such intelligence. For other companies, more traditional methods still apply, either to maintain communication with an existing customer base (retention) or, as a more established growth driver, to build, acquire or rent new databases (acquisition). A major challenge for databases is the reality of obsolescence - including the lag time between when data was acquired and when the database is used. This problem can be addressed by online and offline means including traditional methods. An alternative approach is real-time  proximity marketing  for acquisition purposes.\nAn object database (also object-oriented database management system, OODBMS) is a  database management system  in which information is represented in the form of  objects  as used in  object-oriented programming . Object databases are different from  relational database s which are table-oriented.   Object-relational database s are a hybrid of both approaches.\nStarcounter can be likened by  Oracle 's  TimesTen  in-memory database and  SAP HANA . What these have in common is that they are all based on in-memory technology and are often targeted towards customers that use real-time applications. The main difference is the way the  database management system  is integrated. SAP HANA makes use of a  column-oriented database management system . TimesTen, on the other hand, uses a  relational database management system  (RDBMS). Starcounter is unique in that it uses an object-oriented approach that is integrated with the application (VMDBMS) with an underlying RDMBS .\nIn real-time databases, deadlines are formed and different kinds of systems respond to data that does not meet its deadline in different ways. In a real-time system, each transaction uses a timestamp to schedule the transactions. A priority mapper unit assigns a level of importance to each transaction upon its arrival in the database system that is dependent on how the system views times and other priorities. The timestamp method on relies on the arrival time in the system. Researchers indicate that for most studies, transactions are sporadic with unpredictable arrival times. For example, the system gives an earlier request deadline to a higher priority and a later deadline to a lower priority. Below is a comparison of different scheduling algorithms.\nA real-time database is a database system which uses  real-time processing  to handle workloads whose state is constantly changing. This differs from traditional databases containing persistent data, mostly unaffected by time. For example, a stock market changes very rapidly and is dynamic. The graphs of the different markets appear to be very unstable and yet a database has to keep track of current values for all of the markets of  the New York Stock Exchange . Real-time processing means that a transaction is processed fast enough for the result to come back and be acted on right away. Real-time databases are useful for accounting, banking, law,  medical record s,  multi-media , process control, reservation systems, and scientific data analysis.\nSQLstream provides a relational stream processing platform called SQLstream Blaze for analyzing large volumes of service, sensor and machine and log file data in real-time. It performs real-time collection, aggregation, integration, enrichment and real-time analytics on the streaming data.  Data streams are analyzed using the industry standard  SQL language , using the  ANSI  standard, functionally rich SQL window function to analyze and aggregate real-time streaming data over fixed or sliding time windows, which can be further partitioned by user defined keys. Unlike a traditional  RDBMS  SQL query, which returns a result and exits, streaming SQL queries do not exit, generating results continuously as soon as new data become available. Patterns and exception events in data streams are detected, analyzed and reported 'on the fly' as the data arrive, that is, before the data are stored.  Like a database or data warehouse, SQLstream allows you to create multiple views over the data so that different applications and users can each get their own customized view of the streaming data. The partitioning allows many different analytics to be incrementally computed using a single SQL statement or window., effectively processing potentially millions of streams with a single statement.  For example, partitioning by a customer id would maintain a separate computation for each distinct customer.  This is extremely concise, but also allows for efficient parallel execution.   SQLstream Blaze also allows changes to be made to the queries and views without bringing down and recompiling existing applications.  This is very important for many Internet of Things and other smart services that must operate 24x7 on a continuous real-time basis, where application changes must be made without needing to bringing down the service or rebuild the application.  Part of SQLstream Blaze, StreamLab takes advantage of this capability in order to guide users who wish to explore data streams and understand their structure while the data are still flowing by generating new SQL queries on the fly based on user direction and analysis of data values driven by rules.  In this way, it provides an effective platform for performing real-time operational intelligence, which you can view as real-time business intelligence over streaming operational data.  SQLstream utilizes dataflow technology to execute many queries over high-velocity high-volume Big Data with a massively parallel standards-compliant SQL engine where the queries are executed concurrently and incrementally.  Unlike databases, SQL in SQLstream becomes a language for performing continuous parallel processing, in contrast to a language for data retrieval as commonly found in relational databases.  SQLstream is able to execute its queries in an optimized C++ multi-threaded dataflow engine which operates lock-free.  This enables people to create lock-free parallel processing applications easily, which otherwise require specialist skillets and are often difficult to get working and are often error prone.\nAlthough the real-time database system may seem like a simple system, problems arise during overload when two or more database transactions require access to the same portion of the database. A transaction is usually the result of an execution of a program that accesses or changes the contents of a database. A transaction is different from a stream because a stream only allows read-only operations, and transactions can do both read and write operations. This means in a stream, multiple users can read from the same piece of data, but they cannot both modify it. A database must let only one transaction operate at a time to preserve data consistency. For example, if two students demand to take the remaining spot for a section of a class and they hit submit at the same time, only one student should be able to register for it.\nA relational data stream management system (RDSMS) is a distributed, in-memory  data stream management system  (DSMS) that is designed to use standards-compliant  SQL  queries to process unstructured and structured data streams in real-time. Unlike  SQL  queries executed in a traditional  RDBMS , which return a result and exit, SQL queries executed in a RDSMS do not exit, generating results continuously as new data become available. Continuous SQL queries in a RDSMS use the  SQL  Window function to analyze, join and aggregate data streams over fixed or sliding windows. Windows can be specified as time-based or row-based.\nTo achieve high performance, low overhead, and reliability ODB does not use common database APIs, such as  ODBC , to access the relational database. Rather, each database-specific runtime library uses low-level, native C APIs that are specific to each database. ODB currently supports the  MySQL ,  SQLite ,  PostgreSQL ,  Oracle , and  SQL Server  databases. Bulk/batch operations are supported for Oracle and SQL Server. The application can also use multiple databases (for example, MySQL, SQLite, etc.) at the same time. Multi-database support comes in the static and dynamic flavors with the latter allowing the application to dynamically loadthe database support code for individual database if and when necessary.\nOne interesting aspect of real-time computer graphics is the way in which it differs from traditional off-line rendering systems (and hence, these are the non-real-time graphics systems); non-real-time graphics typically rely on  ray-tracing  where the expensive operation of tracing rays from the camera to the world is allowed and can take as much as hours or even days for a single frame. On the other hand, in the case of real-time graphics, the system has less than 1/30th of a second per image. In order to do that, the current systems cannot afford shooting millions or even billions of rays; instead, they rely on the technique of  z-buffer   triangle rasterization . In this technique, every object is decomposed into individual primitives\u2014the most popular and common one is the triangle. These triangles are then 'drawn' or rendered onto the screen one by one. Each of these triangles get  positioned, rotated and scaled  on the screen and a special hardware (or in the case of an emulator, the software rasterizer) called  rasterizer  generates the pixels inside each of these triangles. These triangles are then decomposed into further smaller atomic units called  pixels (or in computer graphics terminology, aptly called fragments)  that are suitable for displaying on a  display screen . The pixels are then drawn on the screen using a certain color; current systems are capable of deciding the color that results in these triangles\u2014for e.g. a  texture  can be used to 'paint' onto a triangle, which is simply deciding what color to output at each pixel based on a stored picture; or in a more complex case, at each pixel, one can compute if a certain light is being seen or not resulting in very good shadows (using a technique called  shadow mapping ).\nOI is often linked to or compared with  business intelligence  (BI) or  real time business intelligence , in the sense that both help make sense out of large amounts of information. But there are some basic differences: OI is primarily activity-centric, whereas BI is primarily data-centric. As with most technologies, each of these could be sub-optimally coerced to perform the other's task. OI is, by definition, real-time, unlike BI or \u201cOn-Demand\u201d BI, which are traditionally after-the-fact and report-based approaches to identifying patterns. Real-time BI (i.e., On-Demand BI)  relies on the database as the sole source of events.\nTraditional databases are persistent but are incapable of dealing with dynamic data that constantly changes. Therefore, another system is needed. Real-time databases may be modified to improve accuracy and efficiency and to avoid conflict, by providing deadlines and wait periods to insure temporal consistency. Real-time database systems offer a way of monitoring a physical system and representing it in data streams to a database. A data stream, like memory, fades over time. In order to guarantee that the freshest and most accurate information is recorded there are a number of ways of checking transactions to make sure they are executed in the proper order. An online auction house provides an example of a rapidly changing database.\nPervasive initially used the term \"navigational database\" to describe Btrieve, but later changed this to \"transactional database\". The use of the term navigational database was unusual because a  navigational database  uses \"pointers\" and \"paths\" to navigate among data  records , and these pointers are contained in the record itself; ISAM, which is the fundamental structure of Btrieve, uses a secondary index table to store these pointers to decrease search times. Thus, the two types of database are different, and may or may not explain why Pervasive started using different terminology for classifying their database. (Note: This is not strictly correct. A navigational database is one in which the logical access to the data in the database is done via the application-level interface or API, It is navigational in the sense that logical relationships are traversed by the application code \"navigating\" its way through the database. What physical techniques are used to accomplish this, i.e., ISAM, embedded pointers, etc., is almost irrelevant to the discussion. By contrast, a relational database does not provide the application layer with any way to \"navigate\" through the logical database structure and instead provides a set-level interface for selecting, aggregating and joining data. Relational databases may also use a variety of physical techniques to access data including the same mentioned above, but the important aspect of being \"relational\" is that the data is accessed relationally, i.e., vie a set query model rather than a navigational model.)\nReal-time databases are traditional databases that use an extension to give the additional power to yield reliable responses. They use timing constraints that represent a certain range of values for which the data are valid. This range is called temporal validity. A conventional database cannot work under these circumstances because the inconsistencies between the real world objects and the data that represents them are too severe for simple modifications. An effective system needs to be able to handle time-sensitive queries, return only temporally valid data, and support priority scheduling. To enter the data in the records, often a sensor or an input device monitors the state of the physical system and updates the database with new information to reflect the physical system more accurately. When designing a real-time  database system , one should consider how to represent valid time, how facts are associated with  real-time system . Also, consider how to represent attribute values in the database so that process transactions and data consistency have no violations.\nTransactions performed online update databases in real time. This contrasts with batch input, where, for example, a database may not record a purchase until a batch processes it hours or days later. Businesses prefer online input if timeliness is critical to their operation.\nThe data structures used by NoSQL databases (e.g. key-value, graph, or document) differ slightly from those used by default in relational databases, making some operations faster in NoSQL and others faster in relational databases.ometimes the data structures used by NoSQL databases are also viewed as more flexible than relational database tables. NoSQL databases are increasingly used in big data and real-time web applications. NoSQL systems are also sometimes called Not only SQL to emphasize that they may support SQL-like query languages.\nSometimes the data structures used by NoSQL databases are also viewed as more flexible than relational database tables. NoSQL databases are increasingly used in big data and real-time web applications. NoSQL systems are also sometimes called Not only SQL to emphasize that they may support SQL-like query languages.ometimes the data structures used by NoSQL databases are also viewed as more flexible than relational database tables. NoSQL databases are increasingly used in big data and real-time web applications. NoSQL systems are also sometimes called Not only SQL to emphasize that they may support SQL-like query languages.\nRelational databases are powerful because they require few assumptions about how data is related or how it will be extracted from the database. As a result, the same database can be viewed in many different ways. An important feature of relational systems is that a single database can be spread across several tables. This differs from flat-file databases, in which each database is self-contained in a single table. Almost all full-scale database systems are RDBMS's.\nReal-time is an adjective pertaining to computers or processes that operate in real time. Real time describes a human rather than a machine sense of time. In the days when mainframe batch computers were predominant, an expression for a mainframe that interacted immediately with users working from connected terminals was online in real time.\nIn the world of database technology, there are two main types of databases: SQL vs. NoSQL\u00e2\u0080\u0094or, relational databases and non-relational databases. The difference speaks to how they're built, the type of information they store, and how they store it. Learn about the differences between the two and which database type you should choose.", "key": "58_2", "timestamp": "2020-06-23 21:18:59.158755", "settings": {"top_p": 0.9, "gen_frac": 0.5, "spec_frac": 0.8}}